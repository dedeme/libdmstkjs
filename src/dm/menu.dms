// Copyright 06-Nov-2019 ºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

"wg" import
"location" import

( @+i:: withSeparator? =;
  {
    "withSeparator?": withSeparator?
    "selected": ""
    "lopts": [] data
    "ropts": [] data
    "lview": "div" {style: "line-height:22px;"} ui,$+
    "rview": "div" ui,$+
  } map,from
@-m) new =>

// View

( @+m:: Mn =
  Mn .withSeparator?
              ("border-right: 1px solid #000000;")
              ("")
              elif : sepSt =
  "div" {} [
    "table" {class: "main" } [
      "tr" {} [
        "td" {
          style: (`
            padding-right:4px;${
              Mn .withSeparator?
              ("border-right: 1px solid #000000;")
              ("")
              elif
            } ` )
        } [
          (Mn .lview) ]
        "td" {
          style: `
            padding-left:4px;vertical-align:top;
            text-align:right;white-space:nowrap`
        } [
          (Mn .rview) ]]]
    "hr" ] ui,$+
@-<Element>) wg =>

// Control

( @+m:: Mn =
  Mn : "lopts" : [] data : obj,put
  Mn : "lview" : "div" {style: "line-height:22px;"} ui,$+ : obj,put
  Mn : "ropts" : [] data : obj,put
  Mn : "rview" : "div" ui,$+ : obj,put
@-) reset =>

( @+m<Element>:: El =; Mn =
  Mn .lopts El lst,push+ : Opts =
  Mn .lview {removeAll} Opts : ui,$
@-) addLeft =>

( @+m<Element> :: El =; Mn =
  Mn .ropts El lst,push0+ : Opts =
  Mn .rview {removeAll} Opts : ui,$
@-) addRight =>

( @+ms:: id =; Mn =
  "menu_" id + : mId# =
  (@+<Element> El =
    El (att id) ui,prop : att =

    att "" !=
    (El { class: (att mId# == ("frame") ("link") elif) } ui,$)
    if
  @-) : fn =>

  Mn .lopts (fn) lst,each
  Mn .ropts (fn) lst,each
@-) setSelected =>

// static

(@+:: "span" {text: " · "} ui,$+ @-<Element>) separator =>

(@+:: "span" {text: " | "} ui,$+ @-<Element>) separator2 =>

( @+ssl:: # Fn# =; tx =; id =
  Fn# wg,link { att: id ("menu_" id +), class: "link", text: tx } ui,$+
@-<Element>) mkOption =>

( @+sss tx =; id =; module =
  module dup "" == () ("&" +) elif : module =
  location,hrefBase : hpath =;

  "a" {
    att: href ("${hpath}?${module}${id}")
    att: id ("menu_" id +)
    text: tx
  } ui,$+
@-<Element>) mkLink =>

( @+l:: # FnBye# =
  FnBye# wg,link {} [ ("cross" wg,img) { style: "vertical-align:bottom" } ]
    ui,$+
@-<Element>) mkClose =>
